// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  role          UserRole
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profile       Profile?
  jobPostings   JobPosting[]    @relation("RecruiterPostings")
  applications  Application[]
  sentMessages     Message[]     @relation("SenderMessages")
  receivedMessages Message[]     @relation("ReceiverMessages")
}

model Profile {
  id          String    @id @default(uuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  firstName   String
  lastName    String
  title       String?
  bio         String?
  skills      Skill[]
  experience  Experience[]
  education   Education[]
  location    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Skill {
  id          String    @id @default(uuid())
  name        String    @unique
  profiles    Profile[]
  jobPostings JobPosting[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model JobPosting {
  id          String    @id @default(uuid())
  title       String
  company     String
  description String
  recruiterId String
  recruiter   User      @relation("RecruiterPostings", fields: [recruiterId], references: [id])
  skills      Skill[]
  location    String
  salary      Float?
  status      JobStatus @default(OPEN)
  applications Application[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Application {
  id          String    @id @default(uuid())
  jobId       String
  job         JobPosting @relation(fields: [jobId], references: [id])
  candidateId String
  candidate   User      @relation(fields: [candidateId], references: [id])
  status      ApplicationStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Experience {
  id          String    @id @default(uuid())
  profileId   String
  profile     Profile   @relation(fields: [profileId], references: [id])
  title       String
  company     String
  startDate   DateTime
  endDate     DateTime?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Education {
  id          String    @id @default(uuid())
  profileId   String
  profile     Profile   @relation(fields: [profileId], references: [id])
  institution String
  degree      String
  field       String
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Message {
  id          String    @id @default(uuid())
  content     String
  senderId    String
  sender      User      @relation("SenderMessages", fields: [senderId], references: [id])
  receiverId  String
  receiver    User      @relation("ReceiverMessages", fields: [receiverId], references: [id])
  read        Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum UserRole {
  CANDIDATE
  RECRUITER
  ADMIN
}

enum JobStatus {
  OPEN
  CLOSED
  DRAFT
}

enum ApplicationStatus {
  PENDING
  REVIEWING
  ACCEPTED
  REJECTED
  WITHDRAWN
} 